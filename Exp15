 Step 4: Then create model, repository, service and controller folder in
 src/main/java/com/example/employee.

 Step 5: In Model folder, create an Employee.java file and add the following code:

 package com.example.employee.model;
 import jakarta.persistence.Entity;
 import jakarta.persistence.GeneratedValue;
 import jakarta.persistence.GenerationType;
 import jakarta.persistence.Id;
 @Entity
 public class Employee {
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 private Long id;
 private String name;
 private String department;
 private double salary;
// Constructors, Getters and Setters
 public Employee() {}
 public Employee(String name, String department, double salary) {
 this.name = name;
 this.department = department;
 this.salary = salary;
 }
 // Getters and setters
 public Long getId() {
 return id;
 }
 public void setId(Long id) {
 this.id = id;
 }
 public String getName() {
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
 public String getDepartment() {
 return department;
 }
 public void setDepartment(String department) {
 this.department = department;
 }
 public double getSalary() {
 return salary;
 }
 public void setSalary(double salary) {
 this.salary = salary;
 }
 }

  Step 6: In the Repository folder, create an EmployeeRepository.java file and add the
 following code:

 package com.example.employee.repository;
 import com.example.employee.model.Employee;
 import org.springframework.data.jpa.repository.JpaRepository;
 public interface EmployeeRepository extends JpaRepository<Employee, Long> {
 }

Step 7: In the Service folder, create a EmployeeService.java file and add the following code.

 package com.example.employee.service;
 import com.example.employee.model.Employee;
 import com.example.employee.repository.EmployeeRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import java.util.List;
 import java.util.Optional;
 @Service
 public class EmployeeService {
 @Autowired
 private EmployeeRepository employeeRepository;
 public List<Employee> getAllEmployees() {
 return employeeRepository.findAll();
 }
 public Optional<Employee> getEmployeeById(Long id) {
 return employeeRepository.findById(id);
 }
 public Employee addEmployee(Employee employee) {
 return employeeRepository.save(employee);
 }
 public Employee updateEmployee(Long id, Employee employee) {
 if(employeeRepository.existsById(id)) {
 employee.setId(id);
 return employeeRepository.save(employee);
 }
 return null;
 }
 public void deleteEmployee(Long id) {
 employeeRepository.deleteById(id);
 }
 }

 Step 8: In the Controller folder, create a EmployeeController.java file and add the following
 code:

 package com.example.employee.controller;
 import com.example.employee.model.Employee;
 import com.example.employee.service.EmployeeService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
import java.util.List;
 import java.util.Optional;
 @RestController
 @RequestMapping("/api/employees")
 public class EmployeeController {
 @Autowired
 private EmployeeService employeeService;
 @GetMapping
 public List<Employee> getAllEmployees() {
 return employeeService.getAllEmployees();
 }
 @GetMapping("/{id}")
 public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {
 Optional<Employee> employee = employeeService.getEmployeeById(id);
 return employee.map(ResponseEntity::ok).orElseGet(()->
 ResponseEntity.notFound().build());
 }
 @PostMapping
 public Employee addEmployee(@RequestBody Employee employee) {
 return employeeService.addEmployee(employee);
 }
 @PutMapping("/{id}")
 public ResponseEntity<Employee> updateEmployee(@PathVariable Long id,
 @RequestBody Employee employee) {
 Employee updatedEmployee = employeeService.updateEmployee(id, employee);
 if(updatedEmployee != null) {
 return ResponseEntity.ok(updatedEmployee);
 } else {
 return ResponseEntity.notFound().build();
 }
 }
 @DeleteMapping("/{id}")
 public ResponseEntity<Void> deleteEmployee(@PathVariable Long id) {
 employeeService.deleteEmployee(id);
 return ResponseEntity.noContent().build();
 }
 }

Step 9: Now to run the application, Go to SprinBoot Dashboard and click on run. It will run
 on the default port `8080`. You can now access the endpoints and test the RESTful API.

Step 10: To test the RESTful API, Use the Postman tool to interact with the RESTful
 service:--

 Go to menu, select file-> new
 Select http method.
  ToaddNewEmployee:

Select POST method--
In URL type http://localhost:8080/api/employees
 Go to body, Select raw.
 Type the following code and send the request
 Sample JSON body:
 {
 "name": "John Doe",
 "department": "Engineering",
 "salary": 80000
 }

 ToGetEmployee Details:
Select GET method
In URL type http://localhost:8080/api/employees

  ToUpdatetheEmployee Details :
Select PUT method--
In URL type http://localhost:8080/api/employees/{id}
 Go to body, Select raw.
 Type the following code and send the request
 Sample JSON body:
 {
 "name": "Jane Doe",
 "department": "Engineering",
 "salary": 95000
 }

 ToDelete Employee :
Select DELETE method
In URL type, http://localhost:8080/api/employees/{id}
